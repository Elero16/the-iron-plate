from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import sqlite3
import random

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT NOT NULL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS recipes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            recipe_title TEXT NOT NULL,
            recipe_text TEXT NOT NULL
        )
    """)

    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="products")],
        [InlineKeyboardButton("üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="recipes")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="add_recipe")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ª—é–¥–µ–π —Å –∂–µ–ª–µ–∑–æ–¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –∞–Ω–µ–º–∏–µ–π.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "products":
        await products(query, context)
    elif query.data == "recipes":
        await recipes(query, context)
    elif query.data == "add_product":
        await add_product_start(query, context)
    elif query.data == "add_recipe":
        await add_recipe_start(query, context)
    elif query.data == "my_data":
        await my_data(query, context)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –ü–æ–º–æ—â—å ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚Ä¢ –†–µ—Ü–µ–ø—Ç ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ—Ü–µ–ø—Ç\n"
        "‚Ä¢ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"
    )
    await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /products
async def products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products_list = [
        "–ì–æ–≤—è–¥–∏–Ω–∞ (–ø–µ—á—ë–Ω–∞—è, —Ç—É—à—ë–Ω–∞—è)",
        "–ë–∞—Ä–∞–Ω–∏–Ω–∞",
        "–ö—É—Ä–∏—Ü–∞ (–≥—Ä—É–¥–∫–∞, —Ñ–∏–ª–µ)",
        "–°–≤–∏–Ω–∏–Ω–∞",
        "–§–∞—Å–æ–ª—å",
        "–ß–µ—á–µ–≤–∏—Ü–∞",
        "–®–ø–∏–Ω–∞—Ç",
        "–ö—É—Ä–∞–≥–∞",
        "–ò–Ω–∂–∏—Ä",
        "–ú–æ—Ä–∫–æ–≤—å",
        "–Ø–±–ª–æ–∫–∏",
        "–ì—Ä–∞–Ω–∞—Ç—ã",
        "–°–µ–º–µ–Ω–∞ —Ç—ã–∫–≤—ã",
        "–°–µ–º–µ–Ω–∞ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞",
        "–°—ã—Ä",
        "–Ø–∏—á–Ω—ã–π –∂–µ–ª—Ç–æ–∫",
        "–°—É—Ö–∏–µ —Ñ—Ä—É–∫—Ç—ã",
        "–¢–≤–æ—Ä–æ–≥",
    ]

    message = "–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–±–æ–≥–∞—Ç—ã–µ –∂–µ–ª–µ–∑–æ–º):\n\n"
    for product in products_list:
        message += f"‚Ä¢ {product}\n"

    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /recipes
async def recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("recipes.txt", "r", encoding="utf-8") as file:
            content = file.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipes = []
        current_recipe = ""
        
        for line in content.split('\n'):
            if line.strip() == '' and current_recipe.strip():
                recipes.append(current_recipe.strip())
                current_recipe = ""
            else:
                current_recipe += line + '\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if current_recipe.strip():
            recipes.append(current_recipe.strip())
        
        if not recipes:
            await update.message.reply_text("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        recipe = random.choice(recipes)
        await update.message.reply_text(recipe)
        
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:"
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
async def add_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    product_name = update.message.text.strip()

    if not product_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute(
        "INSERT INTO products (user_id, product_name) VALUES (?, ?)",
        (user_id, product_name),
    )
    conn.commit()
    conn.close()

    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!")

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
async def add_recipe_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ (—á–∞—Å—Ç—å 1)
async def add_recipe_title_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    title = update.message.text.strip()

    if not title:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç
    context.user_data["recipe_title"] = title
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è):"
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ (—á–∞—Å—Ç—å 2)
async def add_recipe_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    recipe_text = update.message.text.strip()

    if not recipe_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    title = context.user_data.get("recipe_title")
    if not title:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute(
        "INSERT INTO recipes (user_id, recipe_title, recipe_text) VALUES (?, ?, ?)",
        (user_id, title, recipe_text),
    )
    conn.commit()
    conn.close()

    del context.user_data["recipe_title"]

    await update.message.reply_text(f"‚úÖ –†–µ—Ü–µ–ø—Ç '{title}' –¥–æ–±–∞–≤–ª–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /my_data
async def my_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    cursor.execute("SELECT product_name FROM products WHERE user_id = ?", (user_id,))
    products = cursor.fetchall()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
    cursor.execute("SELECT recipe_title FROM recipes WHERE user_id = ?", (user_id,))
    recipes = cursor.fetchall()

    conn.close()

    message = "–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"

    if products:
        message += "–ü—Ä–æ–¥—É–∫—Ç—ã:\n"
        for p in products:
            message += f"‚Ä¢ {p[0]}\n"
    else:
        message += "–ü—Ä–æ–¥—É–∫—Ç—ã: –Ω–µ—Ç\n"

    if recipes:
        message += "\n–†–µ—Ü–µ–ø—Ç—ã:\n"
        for r in recipes:
            message += f"‚Ä¢ {r[0]}\n"
    else:
        message += "\n–†–µ—Ü–µ–ø—Ç—ã: –Ω–µ—Ç\n"

    await update.message.reply_text(message)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    app = (
        Application.builder()
        .token("8155218325:AAEsKVp-WgpaQPT9557pvl6Naf_lLE73bm4")
        .build()
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add_product", add_product_start))
    app.add_handler(CommandHandler("add_recipe", add_recipe_start))
    app.add_handler(CommandHandler("my_data", my_data))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥—É
    if "recipe_title" in context.user_data:
        await add_recipe_text_handler(update, context)
    else:
        await add_product_handler(update, context)

if __name__ == "__main__":
    main()
    